# -*- coding: utf-8 -*-
"""IP Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gC0WQFFpR2RJISvBV_OA0EyrF_kAKEIp
"""

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

def detect_and_draw_humans(image_path):

    # Reading the image
    img = cv2.imread(image_path)

    # Converting the image to grayscale
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Apply Gaussian blur to reduce noise and smoothen the image
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)

    # Create a binary mask based on color thresholding,we create a binary mask based on color thresholding. The specified color range defines what is considered as "human."
    lower_color = np.array([0, 0, 0]) #Black
    upper_color = np.array([100, 100, 100]) #White
    mask = cv2.inRange(img, lower_color, upper_color)

    # Find contours in the mask. They represent the continuous regions in the mask where the color falls within the specified range.
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    #Array of Valid Contours is created
    valid_contours = []

    #For valid contours, a bounding box is drawn around the detected human figures using cv2 rectangle function
    for contour in contours:
        x, y, w, h = cv2.boundingRect(contour)

        # Filter out small contours (threshold is set to 100, we can adjust according to the image)
        if w * h > 1000:

            # Check the aspect ratio of the contour
            aspect_ratio = w / h

            # If the aspect ratio is not consistent with the aspect ratio of a human body, it is likely to be a false detection
            if aspect_ratio < 0.5 or aspect_ratio > 2.0:
                continue

            # Check the location of the contour
            if y < img.shape[0] // 4:
                continue

            valid_contours.append((x, y, x + w, y + h))
            # Draw a black box around the detected humans
            cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 0), 2)

    #Checking for valid Contours, if any we count the instances and print them and if not we print No humans detected in the image.
    if valid_contours:
        print(f"Human(s) detected in {len(valid_contours)} instance(s).")
    else:
        print("No humans detected in the image.")

    # Display the image with bounding boxes
    cv2_imshow(img)

if __name__ == '__main__':
    image_path = '/content/1.png'
    detect_and_draw_humans(image_path)

if __name__ == '__main__':
    image_path = '/content/2.png'
    detect_and_draw_humans(image_path)

if __name__ == '__main__':
    image_path = '/content/Try.jpg'
    detect_and_draw_humans(image_path)

